import os
from datetime import datetime
from pyspark.sql import SparkSession
from pyspark.sql.functions import from_json, to_json, col, lit, struct, unix_timestamp, current_timestamp
from pyspark.sql.types import StructType, StructField, StringType, LongType

# метод для записи данных в 2 target: в PostgreSQL для фидбэков и в Kafka для триггеров
def foreach_batch_function(df, epoch_id):
    # сохраняем df в памяти, чтобы не создавать df заново перед отправкой в Kafka
    df.persist()
    # записываем df в PostgreSQL с полем feedback
    df.write
        .format('jdbc')
        .option('url', 'jdbc:postgresql://localhost:5432/de')
        .option('driver', 'org.postgresql.Driver')
        .option('dbtable', 'subscribers_feedback')
        .option('user', 'jovyan')
        .option('password', 'jovyan')
        .mode("append")
        .save()
    # создаём df для отправки в Kafka. Сериализация в json.
    df_for_kafka = df.select(
        "restaurant_id",
        "adv_campaign_id",
        "adv_campaign_content",
        "adv_campaign_owner",
        "adv_campaign_owner_contact",
        "adv_campaign_datetime_start",
        "adv_campaign_datetime_end",
        "client_id",
        "datetime_created",
        "trigger_datetime_created"
    ).withColumn("value", to_json(struct(
        "restaurant_id",
        "adv_campaign_id",
        "adv_campaign_content",
        "adv_campaign_owner",
        "adv_campaign_owner_contact",
        "adv_campaign_datetime_start",
        "adv_campaign_datetime_end",
        "client_id",
        "datetime_created",
        "trigger_datetime_created"
    )))
    # отправляем сообщения в результирующий топик Kafka без поля feedback
    df_for_kafka.writeStream
        .format('kafka')
        .option('kafka.bootstrap.servers', 'rc1b-2erh7b35n4j4v869.mdb.yandexcloud.net:9091')
        .option('kafka.security.protocol', 'SASL_SSL')
        .option('kafka.sasl.jaas.config', 'org.apache.kafka.common.security.scram.ScramLoginModule required username="ваш_username" password="ваш_пароль";')
        .option('kafka.sasl.mechanism', 'SCRAM-SHA-512')
        .option('topic', 'ваш_топик_out')
        .outputMode('append')
        .start()
    # очищаем память от df
    df.unpersist()

# необходимые библиотеки для интеграции Spark с Kafka и PostgreSQL
spark_jars_packages = ",".join(
        [
            "org.apache.spark:spark-sql-kafka-0-10_2.12:3.3.0",
            "org.postgresql:postgresql:42.4.0",
        ]
    )

# создаём spark сессию с необходимыми библиотеками в spark_jars_packages для интеграции с Kafka и PostgreSQL
spark = SparkSession.builder
    .appName("RestaurantSubscribeStreamingService")
    .config("spark.sql.session.timeZone", "UTC")
    .config("spark.jars.packages", spark_jars_packages)
    .getOrCreate()

# читаем из топика Kafka сообщения с акциями от ресторанов
restaurant_read_stream_df = spark.readStream
    .format('kafka')
    .option('kafka.bootstrap.servers', 'rc1b-2erh7b35n4j4v869.mdb.yandexcloud.net:9091')
    .option('kafka.security.protocol', 'SASL_SSL')
    .option('kafka.sasl.jaas.config', 'org.apache.kafka.common.security.scram.ScramLoginModule required username="ваш_username" password="ваш_пароль";')
    .option('kafka.sasl.mechanism', 'SCRAM-SHA-512')
    .option('subscribe', 'ваш_топик_in')
    .load()

# определяем схему входного сообщения для json
incomming_message_schema = StructType([
    StructField("restaurant_id", StringType(), True),
    StructField("adv_campaign_id", StringType(), True),
    StructField("adv_campaign_content", StringType(), True),
    StructField("adv_campaign_owner", StringType(), True),
    StructField("adv_campaign_owner_contact", StringType(), True),
    StructField("adv_campaign_datetime_start", LongType(), True),
    StructField("adv_campaign_datetime_end", LongType(), True),
    StructField("datetime_created", LongType(), True)
])

# определяем текущее время в UTC в миллисекундах, затем округляем до секунд
current_timestamp_utc = int(round(unix_timestamp(current_timestamp())))

# десериализуем из value сообщения json и фильтруем по времени старта и окончания акции
filtered_read_stream_df = restaurant_read_stream_df.selectExpr(
    "CAST(key AS STRING) as key",
    "CAST(value AS STRING) as value"
).withColumn("value", from_json(col("value"), incomming_message_schema))
.filter(col("value.adv_campaign_datetime_start") <= current_timestamp_utc)
.filter(col("value.adv_campaign_datetime_end") >= current_timestamp_utc)
.select("value.*")

# вычитываем всех пользователей с подпиской на рестораны
subscribers_restaurant_df = spark.read
                    .format('jdbc')
                      .option('url', 'jdbc:postgresql://localhost:5432/de')
                    .option('driver', 'org.postgresql.Driver')
                    .option('dbtable', 'subscribers_restaurants')
                    .option('user', 'jovyan')
                    .option('password', 'jovyan')
                    .load()

# джойним данные из сообщения Kafka с пользователями подписки по restaurant_id (uuid). Добавляем время создания события.
result_df = filtered_read_stream_df.join(subscribers_restaurant_df, on=filtered_read_stream_df["restaurant_id"] == subscribers_restaurant_df["restaurant_id"], how="inner")
        .select(
            filtered_read_stream_df["restaurant_id"],
            filtered_read_stream_df["adv_campaign_id"],
            filtered_read_stream_df["adv_campaign_content"],
            filtered_read_stream_df["adv_campaign_owner"],
            filtered_read_stream_df["adv_campaign_owner_contact"],
            filtered_read_stream_df["adv_campaign_datetime_start"],
            filtered_read_stream_df["adv_campaign_datetime_end"],
            subscribers_restaurant_df["client_id"],
            filtered_read_stream_df["datetime_created"],
            lit(current_timestamp_utc).alias("trigger_datetime_created")
        )

# запускаем стриминг
result_df.writeStream
    .foreachBatch(foreach_batch_function)
    .start()
    .awaitTermination()
